/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n        query ExampleQuery {\n          getCountries {\n            name {\n              common\n              official\n              nativeName {\n                key\n                value {\n                  official\n                  common\n                }\n              }\n            }\n            flag\n          currencies {\n            key\n            value {\n              name\n              symbol\n            }\n          }\n          borders\n          capital\n          maps {\n            googleMaps\n            openStreetMaps\n          }\n          continents\n          flags {\n            png\n            svg\n            alt\n          }\n          population\n          region\n          languages {\n            key\n            value\n          }\n        }\n      }\n      ": types.ExampleQueryDocument,
    "\n  query GetFilteredCountries($filterOptions: FilterOptions) {\n    getFilteredCountries(filterOptions: $filterOptions) {\n      cca2\n      ccn3\n      cca3\n      cioc\n      independent\n      status\n      unMember\n      region\n      subregion\n      landlocked\n      area\n      flag\n      population\n      fifa\n      startOfWeek\n      capitalInfo {\n        latlng\n      }\n      coatOfArms {\n        png\n        svg\n      }\n      flags {\n        png\n        svg\n        alt\n      }\n      continents\n      timezones\n      car {\n        side\n        signs\n      }\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      borders\n      latlng\n      translations {\n        key\n        value {\n          official\n          common\n        }\n      }\n      altSpellings\n      capital\n      idd {\n        root\n        suffixes\n      }\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      tld\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      languages {\n        key\n        value\n      }\n    }\n  }\n": types.GetFilteredCountriesDocument,
    "\n  query CountriesByName($name: String) {\n    getCountriesByName(name: $name) {\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      flag\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      borders\n      capital\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      timezones\n      continents\n      flags {\n        png\n        svg\n        alt\n      }\n      population\n      region\n      languages {\n        key\n        value\n      }\n    }\n  }\n": types.CountriesByNameDocument,
    "\n  query GetCountriesByRegion($region: String) {\n    getCountriesByRegion(region: $region) {\n      cca2\n      ccn3\n      cca3\n      cioc\n      independent\n      status\n      unMember\n      region\n      subregion\n      landlocked\n      area\n      flag\n      population\n      fifa\n      startOfWeek\n      capitalInfo {\n        latlng\n      }\n      coatOfArms {\n        png\n        svg\n      }\n      flags {\n        png\n        svg\n        alt\n      }\n      continents\n      timezones\n      car {\n        side\n        signs\n      }\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      borders\n      latlng\n      translations {\n        key\n        value {\n          official\n          common\n        }\n      }\n      altSpellings\n      capital\n      idd {\n        root\n        suffixes\n      }\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      tld\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      languages {\n        key\n        value\n      }\n    }\n  }\n": types.GetCountriesByRegionDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n        query ExampleQuery {\n          getCountries {\n            name {\n              common\n              official\n              nativeName {\n                key\n                value {\n                  official\n                  common\n                }\n              }\n            }\n            flag\n          currencies {\n            key\n            value {\n              name\n              symbol\n            }\n          }\n          borders\n          capital\n          maps {\n            googleMaps\n            openStreetMaps\n          }\n          continents\n          flags {\n            png\n            svg\n            alt\n          }\n          population\n          region\n          languages {\n            key\n            value\n          }\n        }\n      }\n      "): (typeof documents)["\n        query ExampleQuery {\n          getCountries {\n            name {\n              common\n              official\n              nativeName {\n                key\n                value {\n                  official\n                  common\n                }\n              }\n            }\n            flag\n          currencies {\n            key\n            value {\n              name\n              symbol\n            }\n          }\n          borders\n          capital\n          maps {\n            googleMaps\n            openStreetMaps\n          }\n          continents\n          flags {\n            png\n            svg\n            alt\n          }\n          population\n          region\n          languages {\n            key\n            value\n          }\n        }\n      }\n      "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetFilteredCountries($filterOptions: FilterOptions) {\n    getFilteredCountries(filterOptions: $filterOptions) {\n      cca2\n      ccn3\n      cca3\n      cioc\n      independent\n      status\n      unMember\n      region\n      subregion\n      landlocked\n      area\n      flag\n      population\n      fifa\n      startOfWeek\n      capitalInfo {\n        latlng\n      }\n      coatOfArms {\n        png\n        svg\n      }\n      flags {\n        png\n        svg\n        alt\n      }\n      continents\n      timezones\n      car {\n        side\n        signs\n      }\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      borders\n      latlng\n      translations {\n        key\n        value {\n          official\n          common\n        }\n      }\n      altSpellings\n      capital\n      idd {\n        root\n        suffixes\n      }\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      tld\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      languages {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetFilteredCountries($filterOptions: FilterOptions) {\n    getFilteredCountries(filterOptions: $filterOptions) {\n      cca2\n      ccn3\n      cca3\n      cioc\n      independent\n      status\n      unMember\n      region\n      subregion\n      landlocked\n      area\n      flag\n      population\n      fifa\n      startOfWeek\n      capitalInfo {\n        latlng\n      }\n      coatOfArms {\n        png\n        svg\n      }\n      flags {\n        png\n        svg\n        alt\n      }\n      continents\n      timezones\n      car {\n        side\n        signs\n      }\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      borders\n      latlng\n      translations {\n        key\n        value {\n          official\n          common\n        }\n      }\n      altSpellings\n      capital\n      idd {\n        root\n        suffixes\n      }\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      tld\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      languages {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CountriesByName($name: String) {\n    getCountriesByName(name: $name) {\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      flag\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      borders\n      capital\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      timezones\n      continents\n      flags {\n        png\n        svg\n        alt\n      }\n      population\n      region\n      languages {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query CountriesByName($name: String) {\n    getCountriesByName(name: $name) {\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      flag\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      borders\n      capital\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      timezones\n      continents\n      flags {\n        png\n        svg\n        alt\n      }\n      population\n      region\n      languages {\n        key\n        value\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCountriesByRegion($region: String) {\n    getCountriesByRegion(region: $region) {\n      cca2\n      ccn3\n      cca3\n      cioc\n      independent\n      status\n      unMember\n      region\n      subregion\n      landlocked\n      area\n      flag\n      population\n      fifa\n      startOfWeek\n      capitalInfo {\n        latlng\n      }\n      coatOfArms {\n        png\n        svg\n      }\n      flags {\n        png\n        svg\n        alt\n      }\n      continents\n      timezones\n      car {\n        side\n        signs\n      }\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      borders\n      latlng\n      translations {\n        key\n        value {\n          official\n          common\n        }\n      }\n      altSpellings\n      capital\n      idd {\n        root\n        suffixes\n      }\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      tld\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      languages {\n        key\n        value\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCountriesByRegion($region: String) {\n    getCountriesByRegion(region: $region) {\n      cca2\n      ccn3\n      cca3\n      cioc\n      independent\n      status\n      unMember\n      region\n      subregion\n      landlocked\n      area\n      flag\n      population\n      fifa\n      startOfWeek\n      capitalInfo {\n        latlng\n      }\n      coatOfArms {\n        png\n        svg\n      }\n      flags {\n        png\n        svg\n        alt\n      }\n      continents\n      timezones\n      car {\n        side\n        signs\n      }\n      maps {\n        googleMaps\n        openStreetMaps\n      }\n      borders\n      latlng\n      translations {\n        key\n        value {\n          official\n          common\n        }\n      }\n      altSpellings\n      capital\n      idd {\n        root\n        suffixes\n      }\n      currencies {\n        key\n        value {\n          name\n          symbol\n        }\n      }\n      tld\n      name {\n        common\n        official\n        nativeName {\n          key\n          value {\n            official\n            common\n          }\n        }\n      }\n      languages {\n        key\n        value\n      }\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;